eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgZHJvbmVfczNfY2FjaGVfcHVsbDoKICAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Ryb25lLXMzY2FjaGU6djAuMS4wCiAgICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1bGwiCgogIGJ1aWxkOgogICAgY29tbWFuZHM6CiAgICAgICAtIHNidCBjbGVhbiBhc3NlbWJseSAtRHNidC5pdnkuaG9tZT0uaXZ5MgogICAgaW1hZ2U6IGhzZWViZXJnZXIvc2NhbGEtc2J0CiAgICB3aGVuOgogICAgICBldmVudDoKICAgICAgICAtIHB1c2gKICAgICAgICAtIHB1bGxfcmVxdWVzdAoKICBkcm9uZV9zM19jYWNoZV9wdXNoOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9kcm9uZS1zM2NhY2hlOnYwLjEuMAogICAgZHJvbmVfczNfY2FjaGVfZm9sZGVyczoKICAgICAgLSAuaXZ5MgogICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1c2giCgogIGRvY2tlci1idWlsZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBtZXJjdXJ5IC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCgogIGludGVncmF0aW9uOgogICAgaW1hZ2U6IGRvY2tlci9jb21wb3NlOjEuMTAuMQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlci1jb21wb3NlIHVwIC1kCiAgICAgIC0gc2xlZXAgMTAKICAgICAgLSBkb2NrZXItY29tcG9zZSBleGVjIC1UIG1lcmN1cnkgc2J0IGl0OnRlc3QKICAgICAgLSBkb2NrZXItY29tcG9zZSBzdG9wCiAgICAgIC0gc2xlZXAgMTAKICAgICAgLSBkb2NrZXItY29tcG9zZSBraWxsCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgbWVyY3VyeSBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWVyY3VyeToke0RST05FX0JVSUxEX05VTUJFUn0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWVyY3VyeToke0RST05FX0JVSUxEX05VTUJFUn0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEzLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.Umrl4OPwodD8wTgI0B3TAJav-iorubPVcjU973V30uM