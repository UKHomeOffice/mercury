eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgZHJvbmVfczNfY2FjaGVfcHVsbDoKICAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Ryb25lLXMzY2FjaGU6djAuMS4wCiAgICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1bGwiCgogIGJ1aWxkOgogICAgY29tbWFuZHM6CiAgICAgICAtIHNidCBjbGVhbiBhc3NlbWJseSAtRHNidC5pdnkuaG9tZT0uaXZ5MgogICAgaW1hZ2U6IGhzZWViZXJnZXIvc2NhbGEtc2J0CiAgICB3aGVuOgogICAgICBldmVudDoKICAgICAgICAtIHB1c2gKICAgICAgICAtIHB1bGxfcmVxdWVzdAoKICBkcm9uZV9zM19jYWNoZV9wdXNoOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9kcm9uZS1zM2NhY2hlOnYwLjEuMAogICAgZHJvbmVfczNfY2FjaGVfZm9sZGVyczoKICAgICAgLSAuaXZ5MgogICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1c2giCgogIGRvY2tlci1idWlsZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBtZXJjdXJ5IC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCgogIGludGVncmF0aW9uOgogICAgaW1hZ2U6IGRvY2tlci9jb21wb3NlOjEuMTAuMQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlci1jb21wb3NlIHVwIC1kCiAgICAgIC0gc2xlZXAgMTAKICAgICAgLSBkb2NrZXItY29tcG9zZSBleGVjIC1UIG1lcmN1cnkgc2J0IGl0OnRlc3QKICAgICAgLSBkb2NrZXItY29tcG9zZSBzdG9wCiAgICAgIC0gc2xlZXAgMTAKICAgICAgLSBkb2NrZXItY29tcG9zZSBraWxsCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgbWVyY3VyeSBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWVyY3VyeToke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL21lcmN1cnk6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgdHJpZ2dlcl9kZXBsb3lfdG9fZGV2OgogICAgY29tbWFuZHM6CiAgICAgIC0gImtkIC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5IC1mIGt1YmUvY29uZmlnbWFwcy8ke0tVQkVfTkFNRVNQQUNFfS55YW1sIC1mIGt1YmUvZGVwbG95bWVudC55bWwgLWYga3ViZS9pbmdyZXNzLnltbCAtZiBrdWJlL3NlcnZpY2UueW1sIgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gUkVQTElDQVM9MQogICAgICAtIEtVQkVfTkFNRVNQQUNFPWhvY3MtZGV2CiAgICAgIC0gIktVQkVfU0VSVkVSPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsiCiAgICAgIC0gSU5TRUNVUkVfU0tJUF9UTFNfVkVSSUZZPXRydWUKICAgICAgLSBFTlZJUk9OTUVOVD1kZXYKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICB0cmlnZ2VyX2RlcGxveV90b19kZXY6CiAgICBjb21tYW5kczoKICAgICAgLSAia2QgLS1pbnNlY3VyZS1za2lwLXRscy12ZXJpZnkgLWYga3ViZS9jb25maWdtYXBzLyR7S1VCRV9OQU1FU1BBQ0V9LnlhbWwgLWYga3ViZS9kZXBsb3ltZW50LnltbCAtZiBrdWJlL2luZ3Jlc3MueW1sIC1mIGt1YmUvc2VydmljZS55bWwiCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBSRVBMSUNBUz0xCiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9aG9jcy1xYQogICAgICAtICJLVUJFX1NFUlZFUj1odHRwczovL2t1YmUtZGV2LmRzcC5ub3Rwcm9kLmhvbWVvZmZpY2UuZ292LnVrIgogICAgICAtIElOU0VDVVJFX1NLSVBfVExTX1ZFUklGWT10cnVlCiAgICAgIC0gRU5WSVJPTk1FTlQ9cWEKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICB3aGVuOgogICAgICBldmVudDogZGVwbG95bWVudAogICAgICBlbnZpcm9ubWVudDogcWEKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTMtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCg.q037aH7K6XemI2ZKvs4zJfDQQfuEU2NqHiBl5RdVdzs