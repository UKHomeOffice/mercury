eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgZHJvbmVfczNfY2FjaGVfcHVsbDoKICAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Ryb25lLXMzY2FjaGU6djAuMS4wCiAgICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1bGwiCgogIGJ1aWxkOgogICAgY29tbWFuZHM6CiAgICAgICAtIHNidCBjbGVhbiBhc3NlbWJseSAtRHNidC5pdnkyLmhvbWU9Lml2eTIKICAgIGltYWdlOiBoc2VlYmVyZ2VyL3NjYWxhLXNidAogICAgd2hlbjoKICAgICAgZXZlbnQ6CiAgICAgICAgLSBwdXNoCiAgICAgICAgLSBwdWxsX3JlcXVlc3QKCiAgZHJvbmVfczNfY2FjaGVfcHVzaDoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZHJvbmUtczNjYWNoZTp2MC4xLjAKICAgIGRyb25lX3MzX2NhY2hlX2ZvbGRlcnM6CiAgICAgIC0gLml2eTIKICAgIGRyb25lX3MzX2NhY2hlX21vZGU6ICJwdXNoIgoKICBkb2NrZXItYnVpbGQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTMKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgbWVyY3VyeSAuCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICBpbnRlZ3JhdGlvbjoKICAgIGltYWdlOiBkb2NrZXIvY29tcG9zZToxLjEwLjEKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXItY29tcG9zZSB1cCAtZAogICAgICAtIHNsZWVwIDEwCiAgICAgIC0gZG9ja2VyLWNvbXBvc2UgZXhlYyAtVCBtZXJjdXJ5IHNidCBpdDp0ZXN0CiAgICAgIC0gZG9ja2VyLWNvbXBvc2Ugc3RvcAogICAgICAtIHNsZWVwIDEwCiAgICAgIC0gZG9ja2VyLWNvbXBvc2Uga2lsbAogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZSIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIG1lcmN1cnkgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL21lcmN1cnk6JHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL21lcmN1cnk6JHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMy1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.A6MavBtSDtudNiqlklAQphY9Ym_hSbkFW9cY0fSG83U