eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgZHJvbmVfczNfY2FjaGVfcHVsbDoKICAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Ryb25lLXMzY2FjaGU6djAuMS4wCiAgICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1bGwiCgogIGJ1aWxkOgogICAgY29tbWFuZHM6CiAgICAgICAtIHNidCBjbGVhbiBhc3NlbWJseSAtRHNidC5pdnkuaG9tZT0uaXZ5MgogICAgaW1hZ2U6IGhzZWViZXJnZXIvc2NhbGEtc2J0CiAgICB3aGVuOgogICAgICBldmVudDoKICAgICAgICAtIHB1c2gKICAgICAgICAtIHB1bGxfcmVxdWVzdAoKICBkcm9uZV9zM19jYWNoZV9wdXNoOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9kcm9uZS1zM2NhY2hlOnYwLjEuMAogICAgZHJvbmVfczNfY2FjaGVfZm9sZGVyczoKICAgICAgLSAuaXZ5MgogICAgZHJvbmVfczNfY2FjaGVfbW9kZTogInB1c2giCgogIGRvY2tlci1idWlsZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBtZXJjdXJ5IC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCgogIGltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTMKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwraG9jc19yb2JvdCIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIG1lcmN1cnkgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL21lcmN1cnk6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9tZXJjdXJ5OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogbWFzdGVyCgogIHRyaWdnZXJfZGVwbG95X3RvX2RldjoKICAgIGNvbW1hbmRzOgogICAgICAtICJrZCAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeSAtZiBrdWJlL2NvbmZpZ21hcHMvJHtLVUJFX05BTUVTUEFDRX0ueWFtbCAtZiBrdWJlL2RlcGxveW1lbnQueW1sIC1mIGt1YmUvc2VydmljZS55bWwiCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBSRVBMSUNBUz0xCiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9aG9jcy1kZXYKICAgICAgLSAiS1VCRV9TRVJWRVI9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51ayIKICAgICAgLSBJTlNFQ1VSRV9TS0lQX1RMU19WRVJJRlk9dHJ1ZQogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHRyaWdnZXJfZGVwbG95X3RvX3FhOgogICAgY29tbWFuZHM6CiAgICAgIC0gImtkIC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5IC1mIGt1YmUvY29uZmlnbWFwcy8ke0tVQkVfTkFNRVNQQUNFfS55YW1sIC1mIGt1YmUvZGVwbG95bWVudC55bWwgLWYga3ViZS9zZXJ2aWNlLnltbCIKICAgIGVudmlyb25tZW50OgogICAgICAtIFJFUExJQ0FTPTEKICAgICAgLSBLVUJFX05BTUVTUEFDRT1ob2NzLXFhCiAgICAgIC0gIktVQkVfU0VSVkVSPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsiCiAgICAgIC0gSU5TRUNVUkVfU0tJUF9UTFNfVkVSSUZZPXRydWUKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICB3aGVuOgogICAgICBldmVudDogZGVwbG95bWVudAogICAgICBlbnZpcm9ubWVudDogcWEKCiAgdHJpZ2dlcl9kZXBsb3lfdG9fcHJvZDoKICAgIGNvbW1hbmRzOgogICAgICAtICJrZCAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeSAtZiBrdWJlL2NvbmZpZ21hcHMvJHtLVUJFX05BTUVTUEFDRX0ueWFtbCAtZiBrdWJlL2RlcGxveW1lbnQueW1sIC1mIGt1YmUvc2VydmljZS55bWwiCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBSRVBMSUNBUz0zCiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9aG9jcwogICAgICAtICJLVUJFX1NFUlZFUj1odHRwczovL2t1YmUuZHNwLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsiCiAgICAgIC0gSU5TRUNVUkVfU0tJUF9UTFNfVkVSSUZZPXRydWUKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICB3aGVuOgogICAgICBldmVudDogZGVwbG95bWVudAogICAgICBlbnZpcm9ubWVudDogcHJvZAoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMy1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.BvwAf_Id0vM9YqQHomAZyb1Cd6pSUifIeOsG9SfrST8